{"version":3,"sources":["shared/auth/getLoggedInUser.ts","shared/auth/getGithubContext.ts","shared/auth/githubInfo.ts","shared/consts.ts","components/ListWithBadges.tsx","util/copyToClipboard.ts","shared/auth/getToken.ts","shared/analytics.ts","components/Login.tsx","components/TopTokensList.tsx","shared/auth/createAuthHeader.ts","components/Help.tsx","components/Feedback.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["getLoggedInUser","avatarNode","document","querySelector","userName","avatarUrl","getAttribute","substring","userNameMetaNode","head","userNameNode","textContent","trim","id","avatar","getGithubContext","url","undefined","window","location","href","idx","indexOf","length","split","getGithubInfo","_getGithubInfo","apply","this","arguments","_callee","regenerator_default","a","wrap","_context","prev","next","abrupt","Promise","resolve","chrome","storage","sync","get","results","github_token","token","github_id","github_avatar","context","loggedInUser","stop","setGithubToken","_x","_setGithubToken","_callee2","_context2","set","setGithubUserId","_x2","_x3","_setGithubUserId","_callee3","userId","_context3","GITHUB_CLIENT_ID","API_ROOT_URL","commaFormat","formatNumber","ListWithBadges","props","_useState","useState","_useState2","Object","slicedToArray","copiedIdx","setCopiedIdx","react_default","createElement","className","label","items","selectInputContents","evt","node","target","nodeIdx","parseInt","text","docElem","documentElement","body","isRTL","textarea","s","prop","value","style","setProperty","yPosition","pageYOffset","scrollTop","concat","setAttribute","appendChild","focus","selectionStart","selectionEnd","succeeded","execCommand","err","parentNode","removeChild","copyToClipboard","preventDefault","map","tokenItem","key","data-idx","onClick","count","renderList","emptyMessage","renderEmpty","getTokenHeadless","interactive","callback","githubInfo","localRedirectUri","identity","getRedirectURL","redirectUri","runtime","redirectRe","RegExp","console","log","options","encodeURIComponent","_handleProviderResponse","asyncToGenerator","mark","values","hasOwnProperty","setAccessToken","access_token","user_id","Error","_x4","_setAccessToken","launchWebAuthFlow","redirectUri2","lastError","error","matches","match","handleProviderResponse","fragment","pairs","forEach","pair","nameVal","parseRedirectFragment","defaultOptions","debug","Serializable","classCallCheck","properties","JSON","stringify","toObject","str","obj","p","push","join","Hit","_this","possibleConstructorReturn","getPrototypeOf","call","sent","PageHit","screenName","dp","t","AnalyticsEvent","category","action","ec","ea","el","ev","analytics","Analytics","propertyId","_this2","additionalParameters","customDimensions","userAgent","parameters","waitOnPromise","clientId","navigator","objectSpread","_reject","local","result","Date","now","Math","floor","random","hit","send","event","name","index","_this3","then","params","toQueryString","round","method","headers","User-Agent","fetch","sendEvent","newEvent","Login","_ref","info","onAuth","_x5","TopTokensList","user","global","tokenList","setTokenList","_useState3","_useState4","setError","_useState5","_useState6","isLoading","setIsLoading","_useState7","_useState8","pageContext","setPageContext","useEffect","authHeaders","userInfo","Authorization","Content-Type","tabs","query","active","currentWindow","currentTab","tabContext","search","urlParts","endsWith","resp","ok","json","catch","message","Fragment","ListWithBadges_ListWithBadges","src_components_Login","Help","react","Feedback","textAlign","marginTop","color","fontSize","letterSpacing","App","auth","setAuth","authComplete","setAuthComplete","authInfo","pageName","sendPageHit","Help_Help","TopTokensList_TopTokensList","Boolean","hostname","ReactDOM","render","src_App_0","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.10e91814.chunk.js","sourcesContent":["export default function getLoggedInUser() {\n  const avatarNode = document.querySelector(\"img.avatar\");\n  let userName: string | null = \"\";\n  let avatarUrl: string | null = \"\";\n  if (avatarNode) {\n    userName = (avatarNode.getAttribute(\"alt\") || \"\").substring(1);\n    avatarUrl = avatarNode.getAttribute(\"src\");\n  }\n\n  if (!userName) {\n    // The user name is hidden in a side panel, it's not in the alt of the profile\n    // picture any more, which is just bad accessibility. Boo Github devs!\n\n    const userNameMetaNode = document.head.querySelector(\n      'meta[name=\"user-login\"]'\n    );\n\n    if (userNameMetaNode) {\n      userName = userNameMetaNode.getAttribute(\"content\");\n    } else {\n      const userNameNode = document.querySelector(\n        \"[data-target='deferred-side-panel.panel'] .AppHeader-logo + div span.Truncate-text\"\n      ) as HTMLSpanElement;\n      if (userNameNode) {\n        userName = userNameNode.textContent\n          ? userNameNode.textContent.trim()\n          : null;\n      }\n    }\n  }\n\n  if (userName) {\n    return {\n      id: userName.trim(),\n      avatar: avatarUrl,\n    };\n  }\n\n  return null;\n}\n","export default function getGithubContext() {\n  const url = typeof window !== undefined ? window.location.href : \"\";\n  if (!url) {\n    return null;\n  }\n  const domain = \"github.com\";\n  const idx = url.indexOf(domain);\n  if (idx < 0) {\n    return null;\n  }\n  return url.substring(idx + domain.length + 1).split(\"/\")[0];\n}\n","import getLoggedInUser from \"./getLoggedInUser\";\nimport getGithubContext from \"./getGithubContext\";\n\ndeclare const chrome: any;\n\nexport interface GithubInfo {\n  avatar: string | null;\n  context: string | null;\n  id: string | null;\n  token: string | null;\n}\n\nexport async function getGithubInfo(): Promise<GithubInfo> {\n  return new Promise((resolve) => {\n    chrome.storage.sync.get(\n      [\"github_token\", \"github_id\", \"github_avatar\"],\n      function (results: any) {\n        if (results.github_token) {\n          resolve({\n            token: results.github_token || null,\n            id: results.github_id || null,\n            avatar: results.github_avatar || null,\n            context: getGithubContext(),\n          });\n        } else {\n          const loggedInUser = getLoggedInUser();\n          resolve({\n            token: null,\n            id: loggedInUser ? loggedInUser.id : null,\n            avatar: loggedInUser ? loggedInUser.avatar : null,\n            context: getGithubContext(),\n          });\n        }\n      }\n    );\n  });\n}\n\nexport async function setGithubToken(token: string) {\n  return new Promise((resolve) => {\n    chrome.storage.sync.set({ github_token: token }, function () {\n      resolve(true);\n    });\n  });\n}\n\nexport async function setGithubUserId(userId: string, avatarUrl: string) {\n  return new Promise((resolve) => {\n    chrome.storage.sync.set(\n      { github_id: userId, github_avatar: avatarUrl },\n      function () {\n        resolve(true);\n      }\n    );\n  });\n}\n","export const GITHUB_CLIENT_ID = \"9b9e17e168e82438cfb6\";\n\nfunction getFakeUrl() {\n  console.error(\"Do not check this in\");\n  return \"http://localhost:3005/api\";\n}\n\n// DO NOT MODIFY THIS LINE. IT IS SET BY THE /site-nextjs/scripts/setupDev.ts file\nconst IS_RUNNING_LOCAL = false;\n\nexport const API_ROOT_URL = IS_RUNNING_LOCAL\n  ? getFakeUrl()\n  : \"https://gitme.me/api\";\n\nexport const FILE_SIZE_LIMIT_MB = 1;\n","//list-group\nimport React, { useState } from \"react\";\nimport { TopTokenItem } from \"../types\";\nimport \"../style/bootstrap.min.css\";\nimport copyToClipboard from \"../util/copyToClipboard\";\nimport formatNumber from \"format-number\";\nimport \"./ListWithBadges.css\";\nimport \"./token.css\";\n\ninterface Props {\n  emptyMessage?: React.ReactNode;\n  label: string;\n  items: Array<TopTokenItem>;\n}\n\nconst commaFormat = formatNumber({});\n\nexport default function ListWithBadges(props: Props) {\n  const [copiedIdx, setCopiedIdx] = useState(-1);\n  return (\n    <div className=\"ListWithBadges\">\n      <div className=\"listHeader\">\n        <span className=\"listLabel\">{props.label}</span>\n        {props.items.length > 0 ? (\n          <span className=\"timesUsed\">Times used</span>\n        ) : null}\n      </div>\n      {props.items.length > 0\n        ? renderList(props, copiedIdx, setCopiedIdx)\n        : renderEmpty(props)}\n    </div>\n  );\n}\n\nfunction renderList(\n  props: Props,\n  copiedIdx: number,\n  setCopiedIdx: Function\n): React.ReactNode {\n  function selectInputContents(evt: any) {\n    const node = evt.target as HTMLInputElement;\n    const nodeIdx = parseInt(node.getAttribute(\"data-idx\") || \"-1\", 0);\n    const text = props.items[nodeIdx].token;\n    copyToClipboard(`/${text}`);\n    setCopiedIdx(nodeIdx);\n\n    evt.preventDefault();\n  }\n  return (\n    <ul className=\"list-group\">\n      {props.items.map((tokenItem: TopTokenItem, idx: number) => {\n        return (\n          <li className=\"list-group-item d-flex align-items-left\" key={idx}>\n            <span className=\"idx\">{idx + 1}.</span>\n            <span\n              className=\"token\"\n              data-idx={idx}\n              onClick={selectInputContents}\n            >\n              /{tokenItem.token}\n            </span>\n            {copiedIdx === idx ? (\n              <span className=\"copiedText\">Copied!</span>\n            ) : null}\n            <span className=\"count\">{commaFormat(tokenItem.count)}</span>\n          </li>\n        );\n      })}\n    </ul>\n  );\n}\n\nfunction renderEmpty(props: Props) {\n  return (\n    <div className=\"emptyList\">\n      {props.emptyMessage || (\n        <span>\n          <strong>{props.label}</strong>: No memes found, try choosing from\n          another list!\n        </span>\n      )}\n    </div>\n  );\n}\n","// @flow\n\nexport default function copyToClipboard(text: string): boolean {\n  const docElem = document.documentElement;\n  if (!docElem || !document.body) {\n    return false;\n  }\n  const isRTL = docElem.getAttribute(\"dir\") === \"rtl\";\n  const textarea = document.createElement(\"textarea\");\n  function s(prop: string, value: string) {\n    textarea.style.setProperty(prop, value);\n  }\n  s(\"fontSize\", \"12pt\");\n  // Reset box model\n  s(\"border\", \"0\");\n  s(\"padding\", \"0\");\n  s(\"margin\", \"0\");\n  s(\"position\", \"absolute\");\n  s(isRTL ? \"right\" : \"left\", \"-9999px\");\n\n  let yPosition = window.pageYOffset || docElem.scrollTop;\n  s(\"top\", `${yPosition}px`);\n\n  textarea.setAttribute(\"readonly\", \"\");\n  textarea.value = text;\n  if (!document.body) {\n    return false;\n  }\n  document.body.appendChild(textarea);\n  textarea.focus();\n  textarea.selectionStart = 0;\n  textarea.selectionEnd = text.length;\n\n  let succeeded = false;\n\n  try {\n    succeeded = document.execCommand(\"copy\");\n  } catch (err) {\n    succeeded = false;\n  }\n  if (textarea.parentNode) {\n    textarea.parentNode.removeChild(textarea);\n  }\n  return succeeded;\n}\n","import { API_ROOT_URL, GITHUB_CLIENT_ID } from \"../consts\";\nimport {\n  getGithubInfo,\n  setGithubUserId,\n  setGithubToken,\n  GithubInfo,\n} from \"./githubInfo\";\n\ndeclare const chrome: any;\n\n// The Gitmeme Github app for auth is at https://github.com/settings/applications/1090737\n\nexport function getTokenHeadless(\n  interactive: boolean,\n  callback: Function,\n  githubInfo: GithubInfo\n) {\n  const localRedirectUri = (chrome as any).identity.getRedirectURL(\n    \"provider_cb\"\n  );\n\n  const redirectUri = `${API_ROOT_URL}/oauth/` + chrome.runtime.id;\n  const redirectRe = new RegExp(localRedirectUri + \"[#?](.*)\");\n\n  console.log(\"oauth redirecting to \", redirectUri);\n\n  const options = {\n    interactive: interactive,\n    url:\n      \"https://github.com/login/oauth/authorize\" +\n      \"?client_id=\" +\n      GITHUB_CLIENT_ID +\n      \"&redirect_uri=\" +\n      encodeURIComponent(redirectUri),\n  };\n\n  if (!githubInfo.token || !githubInfo.id || !githubInfo.avatar) {\n    console.log(\"calling launchWebAuthFlow with options\", options);\n\n    chrome.identity.launchWebAuthFlow(options, function (redirectUri2: string) {\n      console.log(\"launchWebAuthFlow callback with redirect \", redirectUri2);\n      if (chrome.runtime.lastError) {\n        console.error(\"launchWebAuthFlow error\", chrome.runtime.lastError);\n        callback(new Error(chrome.runtime.lastError));\n        return;\n      }\n\n      // Upon success the response is appended to redirectUri, e.g.\n      // https://{app_id}.chromiumapp.org/provider_cb#access_token={value}\n      //     &refresh_token={value}\n      const matches = redirectUri2.match(redirectRe);\n\n      console.log(\"matches = \", matches);\n      if (matches && matches.length > 1) {\n        console.log(\"calling handleProviderResponse\");\n        handleProviderResponse(parseRedirectFragment(matches[1]));\n      } else {\n        callback(\"Invalid redirect URI\");\n      }\n    });\n  }\n\n  function parseRedirectFragment(fragment: string) {\n    const pairs = fragment.split(/&/);\n    const values: { [key: string]: string } = {};\n\n    pairs.forEach(function (pair) {\n      const nameVal = pair.split(/=/);\n      values[nameVal[0]] = nameVal[1];\n    });\n\n    console.log(\"parseRedirectFragment got values\", values);\n\n    return values;\n  }\n\n  async function handleProviderResponse(values: { [key: string]: string }) {\n    if (values.hasOwnProperty(\"access_token\")) {\n      await setAccessToken(values.access_token, values.user_id, values.avatar);\n      // If response does not have an access_token, it might have the code,\n      // which can be used in exchange for token.\n    } else {\n      callback(new Error(\"Neither access_token nor code available.\"));\n    }\n  }\n\n  async function setAccessToken(token: string, userId: string, avatar: string) {\n    // access_token = token;\n\n    await setGithubToken(token);\n    await setGithubUserId(userId, avatar);\n    callback(null, { token, id: userId, avatar });\n  }\n}\n\nexport default function getToken(interactive: boolean, callback: Function) {\n  getGithubInfo().then(async (githubInfo) => {\n    getTokenHeadless(interactive, callback, githubInfo);\n  });\n}\n","declare const chrome: any;\n\nlet defaultOptions = { debug: false };\n\ninterface Props {\n  cd?: string;\n  dp?: string;\n  ec?: string;\n  el?: string;\n  ea?: string;\n  ev?: any;\n  t?: string;\n}\n\nclass Serializable {\n  properties: Props;\n\n  constructor(props: Props) {\n    this.properties = props || {};\n  }\n\n  toObject() {\n    return this.properties;\n  }\n\n  toString() {\n    return JSON.stringify(this.toObject());\n  }\n\n  toJSON() {\n    return JSON.stringify(this.properties);\n  }\n\n  toQueryString() {\n    const str: Array<string> = [];\n    const obj = this.toObject() as { [key: string]: any };\n    for (const p in obj) {\n      if (obj.hasOwnProperty(p) && obj[p]) {\n        str.push(\n          encodeURIComponent(p) + \"=\" + encodeURIComponent(obj[p] as string)\n        );\n      }\n    }\n    return str.join(\"&\");\n  }\n}\n\nclass Hit extends Serializable {\n  sent: boolean;\n\n  constructor(props: Props) {\n    super(props);\n    this.sent = false;\n  }\n}\n\nclass PageHit extends Hit {\n  constructor(screenName: string) {\n    super({ dp: screenName, t: \"pageview\" });\n  }\n}\n\nclass ScreenHit extends Hit {\n  constructor(screenName: string) {\n    super({ cd: screenName, t: \"screenview\" });\n  }\n}\n\nclass AnalyticsEvent extends Hit {\n  constructor(\n    category: string,\n    action: string,\n    label?: string,\n    value?: string | number\n  ) {\n    super({ ec: category, ea: action, el: label, ev: value, t: \"event\" });\n  }\n}\n\nclass Analytics {\n  customDimensions: Array<any>;\n  propertyId: string;\n  options: any;\n  userAgent: string;\n  parameters: any;\n\n  waitOnPromise: Promise<any>;\n  clientId: string;\n\n  constructor(\n    propertyId: string,\n    additionalParameters = {},\n    options = defaultOptions\n  ) {\n    this.customDimensions = [];\n    this.propertyId = propertyId;\n    this.options = options;\n    this.clientId = \"\";\n\n    this.userAgent = window.navigator.userAgent;\n\n    this.parameters = {\n      ...additionalParameters,\n    };\n\n    const storageKey = \"analytics_id\";\n\n    // Get the client ID from local storage\n    this.waitOnPromise = new Promise((resolve, _reject) => {\n      chrome.storage.local.get(\n        [storageKey],\n        (result: { [key: string]: string }) => {\n          const clientId = result[storageKey];\n          if (clientId) {\n            this.clientId = clientId;\n          } else {\n            this.clientId = genClientID();\n            const obj = {} as { [key: string]: string };\n            obj[storageKey] = this.clientId;\n\n            chrome.storage.local.set(obj);\n          }\n          resolve(true);\n        }\n      );\n    });\n  }\n\n  hit(hit: Hit) {\n    // send only after the user agent is saved\n    return this.send(hit);\n  }\n\n  event(event: AnalyticsEvent) {\n    // send only after the user agent is saved\n    return this.send(event);\n  }\n\n  addParameter(name: string, value: string) {\n    this.parameters[name] = value;\n  }\n\n  addCustomDimension(index: number, value: string) {\n    this.customDimensions[index] = value;\n  }\n\n  removeCustomDimension(index: number) {\n    delete this.customDimensions[index];\n  }\n\n  send(hit: Hit) {\n    /* format: https://www.google-analytics.com/collect? +\n     * &tid= GA property ID (required)\n     * &v= GA protocol version (always 1) (required)\n     * &t= hit type (pageview / screenview)\n     * &dp= page name (if hit type is pageview)\n     * &cd= screen name (if hit type is screenview)\n     * &cid= anonymous client ID (optional if uid is given)\n     * &uid= user id (optional if cid is given)\n     * &ua= user agent override\n     * &an= app name (required for any of the other app parameters to work)\n     * &aid= app id\n     * &av= app version\n     * &sr= screen resolution\n     * &cd{n}= custom dimensions\n     * &z= cache buster (prevent browsers from caching GET requests -- should always be last)\n     */\n    return this.waitOnPromise.then(() => {\n      const customDimensions = this.customDimensions\n        .map((value, index) => `cd${index}=${value}`)\n        .join(\"&\");\n\n      const params = new Serializable(this.parameters).toQueryString();\n\n      const url = `https://www.google-analytics.com/collect?tid=${\n        this.propertyId\n      }&v=1&cid=${\n        this.clientId\n      }&${hit.toQueryString()}&${params}&${customDimensions}&z=${Math.round(\n        Math.random() * 1e8\n      )}`;\n\n      let options = {\n        method: \"get\",\n        headers: {\n          \"User-Agent\": this.userAgent,\n        },\n      };\n\n      return fetch(url, options);\n    });\n  }\n}\n\nfunction genClientID() {\n  return Date.now() + \"_\" + Math.floor(Math.random() * 1000);\n}\n\nconst UaString = \"UA-11032269-7\";\n\nconst analytics = new Analytics(UaString);\n\nfunction newEvent(\n  category: string,\n  action: string,\n  label?: string,\n  value?: string | number\n) {\n  return new AnalyticsEvent(category, action, label, value);\n}\n\nexport function sendEvent(\n  category: string,\n  action: string,\n  label?: string,\n  value?: string | number\n) {\n  const evt = newEvent(category, action, label, value);\n  return analytics.event(evt);\n}\n\nexport function sendPageHit(pageName: string) {\n  const hit = new PageHit(pageName);\n  return analytics.hit(hit);\n}\n","import React from \"react\";\nimport \"../App.css\";\nimport getToken from \"../shared/auth/getToken\";\nimport { GithubInfo } from \"../shared/auth/githubInfo\";\n\nimport \"./Login.css\";\nimport { sendEvent } from \"../shared/analytics\";\n\ndeclare const chrome: any;\n\ninterface Props {\n  onAuth: (authInfo: GithubInfo) => void;\n}\n\nconst Login = (props: Props) => {\n  function _logIn() {\n    console.log(\"Logging in\");\n    try {\n      if (!chrome || !chrome.identity) {\n        console.log(\"Not in an extension\");\n        return;\n      }\n      sendEvent(\"action\", \"login\", \"begin\", \"popup\");\n      getToken(true, async (err: any, info: GithubInfo) => {\n        console.log(\"getToken complete\", \"Error is \", err, \"info is \", info);\n        if (err) {\n          sendEvent(\"action\", \"login\", \"fail\", \"popup\");\n          console.error(err);\n        } else {\n          console.log(\"got token info \", info);\n          sendEvent(\"action\", \"login\", \"success\", \"popup\");\n          props.onAuth(info);\n        }\n      });\n    } catch (err) {\n      console.error(err);\n    }\n  }\n  return (\n    <div className=\"Login\">\n      <button onClick={_logIn}>Log in with Github</button>\n    </div>\n  );\n};\n\nexport default Login;\n","import React, { useState, useEffect, MouseEvent } from \"react\";\nimport { API_ROOT_URL } from \"../shared/consts\";\nimport { TopTokenItem } from \"../types\";\nimport ListWithBadges from \"./ListWithBadges\";\nimport { GithubInfo } from \"../shared/auth/githubInfo\";\nimport \"./TopTokensList.css\";\nimport Login from \"./Login\";\nimport createAuthHeader from \"../shared/auth/createAuthHeader\";\n\ndeclare const chrome: any;\n\ninterface Props {\n  userInfo: GithubInfo;\n  onAuth: (authInfo: GithubInfo) => void;\n}\n\ntype TokenList = {\n  context: Array<TopTokenItem>;\n  user: Array<TopTokenItem>;\n  global: Array<TopTokenItem>;\n};\n\nexport default function TopTokensList(props: Props) {\n  const [tokenList, setTokenList] = useState({\n    context: [],\n    user: [],\n    global: []\n  } as TokenList);\n  const [error, setError] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(true);\n  const [pageContext, setPageContext] = useState(\"\");\n\n  useEffect(() => {\n    const authHeaders =\n      props.userInfo.token && props.userInfo.id !== null\n        ? createAuthHeader(props.userInfo.id, props.userInfo.token)\n        : {};\n\n    chrome.tabs.query(\n      { active: true, currentWindow: true },\n      (tabs: Array<any>) => {\n        // There will be only one in this array\n        const currentTab = tabs[0];\n\n        let tabContext = \"\";\n        if (currentTab) {\n          let url: string = currentTab.url;\n\n          if (!url) {\n            // When running in an iframe, the url in the 'currentTab'\n            // is undefined for some reason. In this case, we will have\n            // passed through a single parameter, 'currentUrl' with the\n            // window's url, so use that instead\n            if (window.location.search.indexOf(\"currentUrl=\") > -1) {\n              url = window.location.search.split(\"=\")[1];\n            }\n          }\n\n          const urlParts = url.split(\"/\");\n          if (\n            urlParts[2] === \"github.com\" ||\n            urlParts[2].endsWith(\".github.com\")\n          ) {\n            tabContext = urlParts[3] || \"\";\n            setPageContext(tabContext);\n          }\n        }\n\n        fetch(`${API_ROOT_URL}/top_tokens?context=${tabContext}`, {\n          headers: authHeaders\n        })\n          .then(resp => {\n            if (resp.ok) {\n              return resp.json();\n            }\n            throw new Error(\"Failed to fetch top tokens\");\n          })\n          .then((results: TokenList) => {\n            setTokenList(results);\n            setIsLoading(false);\n          })\n          .catch(err => {\n            setError(err.message);\n            setIsLoading(false);\n          });\n      }\n    );\n  }, [props.userInfo.id, props.userInfo.context]);\n\n  if (isLoading) {\n    return null;\n  }\n\n  return (\n    <div className=\"TopTokensList\">\n      {!error ? (\n        <>\n          {tokenList.context && tokenList.context.length > 0 ? (\n            <ListWithBadges\n              label={`In ${pageContext}`}\n              items={tokenList.context}\n            />\n          ) : null}\n          <ListWithBadges label=\"Trending\" items={tokenList.global} />\n          <ListWithBadges\n            label=\"Your Memes\"\n            items={props.userInfo.token ? tokenList.user : []}\n            emptyMessage={\n              <div className=\"emptyMsg\">\n                <div>\n                  Log in with your Github account to see the most popular memes\n                  used by you and your team\n                </div>\n                <div>\n                  <Login onAuth={props.onAuth} />\n                </div>\n              </div>\n            }\n          />\n        </>\n      ) : (\n        <div>Error</div>\n      )}\n    </div>\n  );\n}\n","export default function createAuthHeader(userId: string, token: string) {\n  return {\n    Authorization: `Bearer ${userId}___${token}`,\n    \"Content-Type\": \"application/json\"\n  };\n}\n","import * as React from \"react\";\n\nimport \"./Help.css\";\nimport \"./token.css\";\n\nexport default function Help() {\n  return (\n    <div className=\"Help\">\n      <strong>\n        <a href=\"https://gitme.me\" target=\"_blank\">\n          GitMeme\n        </a>\n      </strong>{\" \"}\n      brings lots of fun to Github by making it easy to include Gifs in your\n      comments. In any text box, just type a forward slash and some text to\n      insert a meme, e.g <span className=\"token\">/shipit</span>\n    </div>\n  );\n}\n","import * as React from \"react\";\n\nexport default function Feedback() {\n  return (\n    <div style={{ textAlign: \"center\", marginTop: \"16px\" }}>\n      <a\n        href=\"https://spectrum.chat/gitmeme\"\n        target=\"_blanks\"\n        style={{ color: \"#0066d6\", fontSize: \"14px\", letterSpacing: \"-0.15px\" }}\n      >\n        Gift Feedback\n      </a>\n    </div>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport { getGithubInfo, GithubInfo } from \"./shared/auth/githubInfo\";\nimport TopTokensList from \"./components/TopTokensList\";\nimport Help from \"./components/Help\";\nimport { sendPageHit } from \"./shared/analytics\";\nimport Feedback from \"./components/Feedback\";\n\nconst App = () => {\n  const [auth, setAuth] = useState({\n    token: \"\",\n    id: \"\",\n    avatar: \"\"\n  } as GithubInfo);\n  const [authComplete, setAuthComplete] = useState(false);\n\n  useEffect(() => {\n    // Run on mount\n    getGithubInfo().then(authInfo => {\n      setAuth(authInfo);\n      setAuthComplete(true);\n    });\n    sendPageHit(\"popup\");\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <Help />\n      {authComplete ? (\n        <TopTokensList\n          userInfo={auth}\n          onAuth={(authInfo: GithubInfo) => {\n            console.log(\"Using authInfo \", authInfo);\n            setAuth(authInfo);\n          }}\n        />\n      ) : null}\n      <Feedback />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  // Do nothing in here as we don't use it. Also, the service-worker.js file\n  // pulls in remote code (albeit from Google), which is no longer allowed when submitting\n  // to the Google Play Store\n  // if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n  //   // The URL constructor is available in all browsers that support SW.\n  //   const publicUrl = new URL(\n  //     (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n  //     window.location.href\n  //   );\n  //   if (publicUrl.origin !== window.location.origin) {\n  //     // Our service worker won't work if PUBLIC_URL is on a different origin\n  //     // from what our page is served on. This might happen if a CDN is used to\n  //     // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n  //     return;\n  //   }\n  //   window.addEventListener('load', () => {\n  //     const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n  //     if (isLocalhost) {\n  //       // This is running on localhost. Let's check if a service worker still exists or not.\n  //       checkValidServiceWorker(swUrl, config);\n  //       // Add some additional logging to localhost, pointing developers to the\n  //       // service worker/PWA documentation.\n  //       navigator.serviceWorker.ready.then(() => {\n  //         console.log(\n  //           'This web app is being served cache-first by a service ' +\n  //             'worker. To learn more, visit https://bit.ly/CRA-PWA'\n  //         );\n  //       });\n  //     } else {\n  //       // Is not localhost. Just register service worker\n  //       registerValidSW(swUrl, config);\n  //     }\n  //   });\n  // }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister().catch((err) => {});\n      })\n      .catch((err) => {});\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}